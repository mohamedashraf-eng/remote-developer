@startuml
' Styling
skinparam activity {
  BackgroundColor White
  BorderColor Black
  FontName Arial
  FontSize 12
}

skinparam condition {
  BackgroundColor White
  BorderColor Black
  FontName Arial
  FontSize 12
}

skinparam note {
  BackgroundColor LightYellow
  BorderColor Black
  FontName Arial
  FontSize 11
}

' Start
start

' Load Configuration
:Load Configuration from config.json;
if () then ([File Not Found])
  :Log Error: Config file not found;
  :Display Error to User;
  stop
elseif () then ([Invalid JSON])
  :Log Error: Invalid JSON in config file;
  :Display Error to User;
  stop
else ([Success])
endif

' Establish SSH Connection
:Establish SSH Connection;
if () then ([Key Found and Paired])
  :Connect using SSH Key;
elseif () then ([No Key or Not Paired])
  :Prompt User for Password;
  :Connect using Password;
  if () then ([Auth Failed])
    :Log Error: Authentication Failed;
    :Display Error to User;
    stop
  else ([Auth Success])
  endif
else ([Connection Error])
  :Log Error: SSH Connection Error;
  :Display Error to User;
  stop
endif

' Validate Configuration
:Validate Configuration Values;
if () then ([Invalid Config])
  :Log Error: Configuration Validation Failed;
  :Display Error to User;
  :Close SSH Connection (if open);
  stop
else ([Valid Config])
endif

' Check and Setup SSH Keys
:Check for SSH Keys;
if () then ([Keys Exist and Paired])
  :Use Existing SSH Keys;
elseif () then ([No Keys or Not Paired])
  :Generate SSH Key Pair;
  if () then ([Key Generation Failed])
    :Log Error: SSH Key Generation Failed;
    :Display Error to User;
    :Close SSH Connection (if open);
    stop
  else ([Key Generation Success])
    :Automate Copy Public Key to Remote;
    if () then ([Copy Failed])
      :Log Error: Public Key Copy Failed;
      :Display Error to User;
      :Close SSH Connection (if open);
      stop
    else ([Copy Success])
      :Update Config File (private key path, ssh_paired=True);
      if () then ([Update Failed])
        :Log Error: Config File Update Failed;
        :Display Error to User;
        :Close SSH Connection (if open);
        stop
      else ([Update Success])
      endif
    endif
  endif
endif

' Ensure Remote Directory
:Ensure Remote Directory Exists;
if () then ([Directory Creation Failed])
  :Log Error: Remote Directory Creation Failed;
  :Display Error to User;
  :Close SSH Connection (if open);
  stop
else ([Directory Exists or Created])
endif

' Create Devcontainer Files
:Create Devcontainer Files (docker-compose.yml, Dockerfile);
if () then ([File Creation Failed])
  :Log Error: Devcontainer File Creation Failed;
  :Display Error to User;
  :Close SSH Connection (if open);
  stop
else ([Files Created])
endif

' Build and Start Devcontainer
:Build and Start Devcontainer (docker-compose up -d);
if () then ([Devcontainer Start Failed])
  :Log Error: Devcontainer Start Failed;
  :Display Error to User;
  :Close SSH Connection (if open);
  stop
else ([Devcontainer Started])
endif

' File Sync
:Start File Synchronization (rsync);
note right: Continuous background process
if () then ([Sync Interrupted])
  :Log Info: File Sync Interrupted;
else ([Sync Error])
  :Log Warning: File Sync Error;
endif

' Run Command (Optional)
if () then ([Run Command Requested])
  :Run Command in Devcontainer;
  if () then ([Command Execution Failed])
    :Log Error: Command Execution Failed;
    :Display Error to User;
  else ([Command Executed])
    :Display Command Output to User;
  endif
endif

' Close SSH Connection
:Close SSH Connection;

stop

@enduml
